// Mocks generated by Mockito 5.4.5 from annotations
// in study_scheduler/test/unit_tests/schedule_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:study_scheduler/data/database/database_helper.dart' as _i3;
import 'package:study_scheduler/data/models/activity.dart' as _i6;
import 'package:study_scheduler/data/models/schedule.dart' as _i5;
import 'package:study_scheduler/data/models/study_material.dart' as _i7;
import 'package:study_scheduler/services/notification_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertSchedule(_i5.Schedule? schedule) =>
      (super.noSuchMethod(
            Invocation.method(#insertSchedule, [schedule]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateSchedule(_i5.Schedule? schedule) =>
      (super.noSuchMethod(
            Invocation.method(#updateSchedule, [schedule]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteSchedule(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSchedule, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.Schedule>> getSchedules() =>
      (super.noSuchMethod(
            Invocation.method(#getSchedules, []),
            returnValue: _i4.Future<List<_i5.Schedule>>.value(<_i5.Schedule>[]),
          )
          as _i4.Future<List<_i5.Schedule>>);

  @override
  _i4.Future<_i5.Schedule?> getSchedule(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSchedule, [id]),
            returnValue: _i4.Future<_i5.Schedule?>.value(),
          )
          as _i4.Future<_i5.Schedule?>);

  @override
  _i4.Future<int> insertActivity(_i6.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#insertActivity, [activity]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateActivity(_i6.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#updateActivity, [activity]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteActivity(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteActivity, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Activity>> getActivities() =>
      (super.noSuchMethod(
            Invocation.method(#getActivities, []),
            returnValue: _i4.Future<List<_i6.Activity>>.value(<_i6.Activity>[]),
          )
          as _i4.Future<List<_i6.Activity>>);

  @override
  _i4.Future<List<_i6.Activity>> getActivitiesByScheduleId(int? scheduleId) =>
      (super.noSuchMethod(
            Invocation.method(#getActivitiesByScheduleId, [scheduleId]),
            returnValue: _i4.Future<List<_i6.Activity>>.value(<_i6.Activity>[]),
          )
          as _i4.Future<List<_i6.Activity>>);

  @override
  _i4.Future<List<_i6.Activity>> getActivitiesByDay(int? dayOfWeek) =>
      (super.noSuchMethod(
            Invocation.method(#getActivitiesByDay, [dayOfWeek]),
            returnValue: _i4.Future<List<_i6.Activity>>.value(<_i6.Activity>[]),
          )
          as _i4.Future<List<_i6.Activity>>);

  @override
  _i4.Future<_i6.Activity?> getActivity(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getActivity, [id]),
            returnValue: _i4.Future<_i6.Activity?>.value(),
          )
          as _i4.Future<_i6.Activity?>);

  @override
  _i4.Future<List<_i6.Activity>> getUpcomingActivities([DateTime? dayOfWeek]) =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingActivities, [dayOfWeek]),
            returnValue: _i4.Future<List<_i6.Activity>>.value(<_i6.Activity>[]),
          )
          as _i4.Future<List<_i6.Activity>>);

  @override
  _i4.Future<int> insertStudyMaterial(_i7.StudyMaterial? material) =>
      (super.noSuchMethod(
            Invocation.method(#insertStudyMaterial, [material]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateStudyMaterial(_i7.StudyMaterial? material) =>
      (super.noSuchMethod(
            Invocation.method(#updateStudyMaterial, [material]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteStudyMaterial(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStudyMaterial, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i7.StudyMaterial>> getStudyMaterials() =>
      (super.noSuchMethod(
            Invocation.method(#getStudyMaterials, []),
            returnValue: _i4.Future<List<_i7.StudyMaterial>>.value(
              <_i7.StudyMaterial>[],
            ),
          )
          as _i4.Future<List<_i7.StudyMaterial>>);

  @override
  _i4.Future<_i7.StudyMaterial?> getStudyMaterial(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getStudyMaterial, [id]),
            returnValue: _i4.Future<_i7.StudyMaterial?>.value(),
          )
          as _i4.Future<_i7.StudyMaterial?>);

  @override
  _i4.Future<List<_i7.StudyMaterial>> getStudyMaterialsByCategory(
    String? category,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getStudyMaterialsByCategory, [category]),
            returnValue: _i4.Future<List<_i7.StudyMaterial>>.value(
              <_i7.StudyMaterial>[],
            ),
          )
          as _i4.Future<List<_i7.StudyMaterial>>);

  @override
  _i4.Future<List<_i7.StudyMaterial>> searchStudyMaterials(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchStudyMaterials, [query]),
            returnValue: _i4.Future<List<_i7.StudyMaterial>>.value(
              <_i7.StudyMaterial>[],
            ),
          )
          as _i4.Future<List<_i7.StudyMaterial>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i8.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> scheduleActivityNotification(_i6.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleActivityNotification, [activity]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelNotification(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#cancelNotification, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllNotifications, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
